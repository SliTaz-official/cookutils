#!/bin/sh
#
# SliTaz Build Bot. The Cooker is a tool to automate and test SliTaz package 
# building. Please read the Cookbook documentation for more information 
# and put talk to AUTHORS before adding anything here. PS: no translation
# here since it's not a end user tool and it's not usfull, all devs should
# at least understand basic English.
#

[ -f "/etc/slitaz/cook.conf" ] && . /etc/slitaz/cook.conf
[ -f "cook.conf" ] && . ./cook.conf

# The same wok as cook.
wok="$WOK"

# Cooker DB files.
activity="$CACHE/activity"
commits="$CACHE/commits"
cooklist="$CACHE/cooklist"
cookorder="$CACHE/cookorder"
command="$CACHE/command"
blocked="$CACHE/blocked"
broken="$CACHE/broken"
cooknotes="$CACHE/cooknotes"

#
# Functions
#

usage() {
	cat << EOT

Usage: cooker [--option]

Options:
  --usage        Display this short usage.
  --setup        Setup the Cooker environment.
  --pkg=         Same as 'cook pkg' but with cooker log.
  --cat=         Cook all packages of a category.
  --flavor=      Cook all packages of a flavor.
  --all          Find and cook all unbuilt packages.

EOT
	exit 0
}

separator() {
	echo "================================================================================"
}

# Lograte activity.
[ -s "$activity" ] && tail -n 20 $activity > /tmp/tail && \
	mv -f /tmp/tail $activity

# Log activities, we want first letter capitalized.
log() {
	grep ^[a-zA-Z0-9] | \
		sed s"#^[A-Z]\([^']*\)#$(date '+%Y-%m-%d %H:%M') : \0#" >> $activity
}

# Some message goes in activity but log verbose output when checking for commits
# into a log file.
log_commits() {
	tee -a $LOGS/commits.log
}

# Log broken packages
broken() {
	echo "$pkg" >> $broken
}

# Clean up after cook sucess.
emty_command() {
	rm -f $command && touch $command
}

# Scan packages deps an fill up cookorder list.
cook_order_scan() {
	touch $cooklist $cookorder
	for pkg in $(cat $cooklist)
	do
		unset DEPENDS BUILD_DEPENDS
		. $wok/$pkg/receipt
		for dep in $DEPENDS $BUILD_DEPENDS
		do
			if grep -q "^$dep$" $cooklist; then
				echo -e "$pkg: $dep"
				if ! grep -q "^$dep$" $cookorder; then
					echo "$dep" >> $cookorder
				fi
			fi
		done
	done
	
	# Append unordered packages to cookored.
	for pkg in $(cat $cooklist)
	do
		if ! grep -q "^$pkg$" $cookorder; then
			echo "$pkg" >> $cookorder
		fi
	done
}

# Scan and rescan untill the cooklist is ordered then handle WANTED.
cook_order() {
	time=$(date +%s)
	scan=0

	# Keep an original cooklist so we do a diff when ordering is finished.
	cp -f $cooklist $cooklist.0
	echo -e "\nInitial Cooker order scan"
	separator
	cook_order_scan
	
	# Diff between the cooklist and new ordered list ? So copy the last
	# cookorder to cooklist and rescan it.
	while /bin/true
	do
		diff $cooklist $cookorder > $cookorder.diff
		if [ -s "$cookorder.diff" ]; then
			scan=$(($scan + 1))
			echo -e "\nDiff scan: $scan"
			separator
			mv -f $cookorder $cooklist
			cook_order_scan
		else
			break
		fi
	done

	# Keep a diff between submited cooklist and the ordered.
	diff $cooklist.0 $cooklist > $cooklist.diff
	rm -f $cookorder $cookorder.diff $cooklist.0

	# Scan is finish: append pkg to WANTED
	echo -e "\nHandle WANTED package"
	separator
	for pkg in $(cat $cooklist)
	do
		unset WANTED
		. $wok/$pkg/receipt
		if [ "$WANTED" ]; then
			echo "$pkg: $WANTED"
			sed -i -e "/^$pkg$/"d  \
				-e "/^$WANTED$/ a $pkg"  $cooklist
		fi
	done

	# Show ordered cooklist
	echo -e "\nCooklist order"
	separator
	cat $cooklist
	separator
	time=$(($(date +%s) - $time))
	pkgs=$(cat $cooklist | wc -l)
	echo -e "\nSummary"
	separator
	cat << EOT
Ordered packages : $pkgs
Scans executed   : $scan
Scan duration    : ${time}s
EOT
	separator && echo ""
}

# Remove blocked (faster this way than grepping before).
strip_blocked() {
	for pkg in $(cat $blocked)
	do
		sed -i /^${pkg}$/d $cooklist
	done && sed -i /^$/d $cooklist
}

# Uses in default mode and with all cmd.
cook_commits() {
	if [ -s "$commits" ]; then
		for pkg in $(cat $commits)
		do
			echo "Cook started for: <a href='cooker.cgi?pkg=$pkg'>$pkg</a>" | log
			echo "cook:$pkg" > $command
			cook $pkg || broken
			sed -i /^${pkg}$/d $commits
		done
	fi
}

# Cook all package in a cooklist.
cook_list() {
	for pkg in $(cat $cooklist)
	do
		if [ ! -d "$wok/$pkg/install" ]; then
			echo "Cook started for: <a href='cooker.cgi?pkg=$pkg'>$pkg</a>" | log
			cook $pkg || broken
			sed -i /^${pkg}$/d $cooklist
		fi
	done
}

#
# Commands
#
case "$1" in
	--usage|--help)
		usage ;;
	--setup)
		# Setup the Cooker environment.
		echo -e "\nSetting up the Cooker"
		echo "Cooker --setup using: $SLITAZ" | log
		separator
		for pkg in mercurial rsync slitaz-toolchain
		do
			[ ! -d "$INSTALLED/$pkg" ] && tazpkg get-install $pkg
		done
		mkdir -p $SLITAZ && cd $SLITAZ
		[ -d "${wok}-hg" ] && echo -e "Hg wok already exist.\n" && exit 1
		[ -d "$wok" ] && echo -e "Build wok already exist.\n" && exit 1
		[ -d "flavors" ] && echo -e "Flavors repo already exist.\n" && exit 1

		# Directories and files
		echo "mkdir's and touch files in: $SLITAZ"
		mkdir -p $PKGS $LOGS $CACHE $SRC
		for f in $activity $blocked $broken $commits $cooklist $command
		do
			touch $f
		done
		hg clone $WOK_URL ${wok}-hg || exit 1
		hg clone $FLAVORS_URL flavors
		cp -a ${wok}-hg $wok
		separator && echo "" ;;
	--reverse=*)
		# Cook all reverse dependencies for a packages. This command let us
		# control the Cooker manually for commit that will cook a lot of packages.
		#
		# Use hg commit ? Ex: hg commit -m "Message bla bla | cooker:reverse"
		#
		pkg=${1#--reverse=}
		[ ! -d "$wok/$pkg" ] && echo "No package $2 found." && exit 0
		cd $wok
		for rev in *
		do
			if fgrep DEPENDS $rev/receipt | fgrep $pkg; then
				echo "TODO: $rev"
			fi
		done ;;
	--pkg=*)
		# Same as 'cook pkg' but with log for web interface.
		pkg=${1#--pkg=}
		echo "Cook started for: <a href='cooker.cgi?pkg=$pkg'>$pkg</a>" | log
		cook $pkg || broken
		emty_command ;;
	--cat=*)
		# Cook all packages of a category.
		cat=${1#--cat=}
		rm -f $cooklist && touch $cooklist && cd $wok
		for pkg in *
		do
			unset CATEGORY && . $pkg/receipt
			[ "$CATEGORY" == "$cat" ] && echo $pkg >> $cooklist
		done
		strip_blocked
		cook_order | tee $LOGS/cookorder.log
		cook_list
		emty_command ;;
	--flavor=*)
		# Cook all packages of a flavor.
		flavor=${1#--flavor=}
		list=$SLITAZ/flavors/$flavor/packages.list
		cp -a $list $cooklist
		strip_blocked
		cook_order | tee $LOGS/cookorder.log
		cook_list
		emty_command ;;
	--all)
		# Try to build all unbuilt packages except blocked's.
		echo "cooker:--all" > $command
		rm -f $cooklist && touch $cooklist
		echo "" && cd $wok
		echo "Cooker cooklist"
		separator
		
		# Find all unbuilt packages.
		echo "Searching for all unbuilt packages" | log
		for pkg in *
		do
			. $pkg/receipt
			[ ! -f "$PKGS/$PACKAGE-${VERSION}${EXTRAVERSION}.tazpkg" ] && \
				echo $pkg >> $cooklist
		done

		strip_blocked
		echo "Packages to cook: $(cat $cooklist | wc -l)" | log
		cook_order | tee $LOGS/cookorder.log
		cook_list
		emty_command ;;
	*)
		# Default is to cook all commits.
		[ "$1" ] && usage
		cooklist=$CACHE/commits
		rm -f $LOGS/commits.log
		echo ""
		echo "Checking for commits" | log_commits
		separator | tee -a $LOGS/commits.log
		
		# Get revisions.
		cd $wok || ( echo "No wok found: $wok" && exit 1 )
		cur=$(hg head --template '{rev}\n')
		echo "Updating Hg wok: ${wok}-hg" | log
		echo "hg:pull" > $command
		cd ${wok}-hg && hg pull -u | log_commits
		new=$(hg head --template '{rev}\n')
		echo "Hg wok revision : $cur" | log_commits
		echo "Pulled revision : $new" | log_commits
		echo "Check date      : $(date '+%Y-%m-%d %H:%M')" | log_commits
		
		# Sync build wok with rsync so we dont take care about removing old
		# files as before.
		if [ "$new" -gt "$cur" ]; then
			echo "Changes found from: $cur to $new" | log
			echo "Syncing build wok with Hg wok..."
			#cp -a ${wok}-hg/* $wok
			#cp -a ${wok}-hg/.hg $wok
			rsync -r -t -c -l -u -D -E --delete ${wok}-hg/ $wok/ | log_commits
		else
			echo "No revision changes: $cur vs $new" | log
			separator | log_commits
			emty_command && echo "" && exit 0
		fi
		
		# Get modifications
		cd ${wok}-hg
		cur=$(($cur + 1))
		msg="from revision $cur to $new"
		[ "$new" == "$cur" ] && msg="revision: $new"
		echo -e "Will cook $msg\n"
		rm -f $commits.tmp && touch $commits.tmp
		for rev in $(seq $cur $new); do
			pkg=$(hg log --rev=$rev --template "{files}\n" | cut -d "/" -f 1)
			for file in $log; do
				echo "Commited file: $file" log_commits
				echo $file >> $commits.tmp
			done
		done
		
		# Keep previews commit and discard duplicate lines
		cat $commits $commits.tmp | sed /"^$"/d > $commits.new
		uniq $commits.new > $commits && rm $commits.*
		echo "Packages to cook: $(cat $commits | wc -l)" | log
		separator && echo "" | log_commits
		strip_blocked
		cook_order | tee $LOGS/cookorder.log
		cook_commits
		emty_command ;;
esac

exit 0
