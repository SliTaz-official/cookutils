#!/bin/sh
#
# pkgdb - module of the SliTaz Cook
# Copyright (C) SliTaz GNU/Linux - GNU GPL v3
#

. /usr/lib/slitaz/libcook.sh


#
# Functions
#

dblog() { tee -a $LOGS/pkgdb.log; }


# Return size of file in human readible format
# Note, "du" in opposite returns size occupied by file on disk (4KB multiple in most cases)

filesize() { busybox ls -lh "$1" | awk '{print $5 "B"}'; }





# Create suitable packages list for TazPkg and only for built packages
# as well as flavors files for TazLiTo.

# Find how much time was spent the last time (for web interface)
lastcooktime=$(sed '/Time:/!d; s|.*: *\([0-9]*\)s.*|\1|' $LOGS/pkgdb.log 2>/dev/null | sed '$!d')
[ -n "$lastcooktime" ] && echo "cook:pkgdb $lastcooktime $(date +%s)" >> $cooktime
while read cmd duration start; do
	[ $(($start + $duration)) -lt $(date +%s) ] &&
	echo "sed -i '/^$cmd $duration/d' $cooktime"
done < $cooktime | sh

rm $LOGS/pkgdb.log 2>/dev/null

case "$1" in
	--flavors|--rmpkg) ;;
	*)
		[ -n "$1" ] && PKGS="$1"
		if [ ! -d "$PKGS" ]; then
			{ newline; _ "Packages directory \"%s\" doesn't exist" "$PKGS"; newline; } | dblog
			exit 1
		fi ;;
esac

time=$(date +%s)
flavors="$SLITAZ/flavors"
live="$SLITAZ/live"

arch=''
case "$ARCH" in
	arm*|x86_64) arch="-$ARCH" ;;
esac

echo 'cook:pkgdb' > $command
_ 'Cook pkgdb: Creating all packages lists' | log
newline; { _ 'Creating lists for "%s"' "$PKGS"; separator; } | dblog

{ _ 'Cook pkgdb started: %s' "$(date "$(_ '+%%F %%R')")"; newline; } | dblog

cd $PKGS

# Web interface database files should exist on the mirror1
>.folderlist; >.filelist
chmod 666 .folderlist .filelist

# Command `cook pkgdb` may be executed by cron. Creating a packages database
# takes some time, during which previously pending packages may be continue to
# create. This will result in an error due to the lack of a database. This in
# turn can lead to errors in the creating of many subsequent packages and will
# require manual intervention.
# Solution is an atomic update of packages database: first we create new files
# (in the separate temp dir), and then instantly (well, almost) replace the old
# files by new ones.

dbs=$(mktemp -d)

_n 'Creating file "%s"' 'packages.list' | dblog
find . -name '*.tazpkg' | sed 's|^./||; s|.tazpkg$||' > $dbs/packages.list
echo " ($(filesize $dbs/packages.list))" | dblog

_n 'Creating file "%s"' 'packages.md5' | dblog
find . -name '*.tazpkg' -exec md5sum '{}' \; | sed 's|./||' > $dbs/packages.md5
echo " ($(filesize $dbs/packages.md5))" | dblog
cp $dbs/packages.md5 $dbs/packages.toremove			# list of unnecessary packages

md5sum $dbs/packages.md5 | cut -d' ' -f1 > $dbs/ID
( cat $dbs/ID | tr $'\n' ' '; date -ur $dbs/ID +%s ) > $dbs/IDs	# md5 and timestamp

_n 'Creating file "%s"' 'descriptions.txt' | dblog
for i in $(ls $WOK | sort); do
	[ -d "$WOK/$i/taz" ] || continue

	for j in $(ls $WOK/$i/taz | sort); do
		[ -e "$WOK/$i/taz/$j/description.txt" ] || continue

		pkgname=$(. $WOK/$i/taz/$j/receipt; echo $PACKAGE)
		echo "$pkgname"
		sed 's|^$| |' "$WOK/$i/taz/$j/description.txt"
		# if description.txt don't ends with \n then add one
		[ -z "$(tail -c1 $WOK/$i/taz/$j/description.txt)" ] || echo
		echo
	done >> $dbs/descriptions.txt
done
echo " ($(filesize $dbs/descriptions.txt))" | dblog

_n 'Creating file "%s"' 'bdeps.txt' | dblog
for i in $(ls $WOK | sort); do
	[ -s "$WOK/$i/receipt" ] || continue
	bdeps=$(. $WOK/$i/receipt; echo $BUILD_DEPENDS) # remove newlines from some receipts
	echo "$i	$bdeps" >> $dbs/bdeps.txt
done
echo " ($(filesize $PKGS/$dbs/bdeps.txt))" | dblog


_ 'Creating lists from "%s"' "$WOK" | dblog
cd $WOK
rsumf=$(mktemp)
touch $dbs/packages.desc $dbs/packages.txt $dbs/packages.info $dbs/packages.equiv
for i in *; do
	[ -d "$WOK/$i/taz" ] || continue

	for j in $(ls $WOK/$i/taz | sort); do
		pack="$i/taz/$j"
		[ -f "$WOK/$pack/receipt" ] || continue
		unset_receipt
		. ./$pack/receipt

		if [ -f "$PKGS/$PACKAGE-$VERSION$EXTRAVERSION$arch.tazpkg" ]; then

			# packages.desc lets us search easily in DB
			cat >> $dbs/packages.desc <<EOT
$PACKAGE | $VERSION$EXTRAVERSION | $SHORT_DESC | $CATEGORY | $WEB_SITE
EOT

			# packages.txt used by tazpkg-web also to provide
			# a human readable package list with version and description.
			cat >> $dbs/packages.txt <<EOT
$PACKAGE
$VERSION$EXTRAVERSION
$SHORT_DESC
$PACKED_SIZE ($UNPACKED_SIZE installed)

EOT

			# packages.info combines TazPkg separate files
			# and will substitute them all
			SIZES=$(echo $PACKED_SIZE $UNPACKED_SIZE | sed 's|\.0||g')
			DEPENDS=$(echo $DEPENDS) # remove newlines from some receipts

			#MD5="$(fgrep " $PACKAGE-$VERSION$EXTRAVERSION.tazpkg" $PKGS/packages.md5 | awk '{print $1}')"
			cp $pack/md5sum $rsumf
			md5sum $pack/receipt | sed 's| [^ ]*/| |' >> $rsumf
			[ -e "$pack/description.txt" ] && md5sum $pack/description.txt | sed 's| [^ ]*/| |' >> $rsumf
			rsum=$(md5sum $rsumf | awk '{print $1}')

			cat >> $dbs/packages.info <<EOT
$PACKAGE	$VERSION$EXTRAVERSION	$CATEGORY	$SHORT_DESC	$WEB_SITE	$TAGS	$SIZES	$DEPENDS	$rsum	$PROVIDE
EOT

			# packages.equiv is used by tazpkg install to check depends.
			for k in $PROVIDE; do
				DEST=''
				echo $k | fgrep -q : && DEST="${k#*:}:"
				if grep -qs ^${k%:*}= $dbs/packages.equiv; then
					sed -i "s/^${k%:*}=/${k%:*}=$DEST$PACKAGE /" \
						$dbs/packages.equiv
				else
					echo "${k%:*}=$DEST$PACKAGE" >> $dbs/packages.equiv
				fi
			done

			# files.list provides a list of all packages files.
			sed "s|^|$PACKAGE: \0|" $i/taz/$j/files.list >> $dbs/files.list

			# list of unnecessary packages
			sed -i "/ $PACKAGE-$VERSION$EXTRAVERSION$arch.tazpkg/d" $dbs/packages.toremove
		else
			# if receipt variable HOST_ARCH absent/empty or contains ARCH
			if [ -z "$HOST_ARCH" -o "${HOST_ARCH/$ARCH/}" != "$HOST_ARCH" ]; then
				_ '  - absent: %s (%s)' "$PACKAGE-$VERSION$EXTRAVERSION.tazpkg" "$ARCH" | dblog
			fi
		fi
	done
done
rm $rsumf


# Display list size.
_ 'Done: %s (%s)' 'packages.desc'  "$(filesize $dbs/packages.desc)"  | dblog
_ 'Done: %s (%s)' 'packages.txt'   "$(filesize $dbs/packages.txt)"   | dblog
_ 'Done: %s (%s)' 'packages.info'  "$(filesize $dbs/packages.info)"  | dblog
_ 'Done: %s (%s)' 'packages.equiv' "$(filesize $dbs/packages.equiv)" | dblog

cd $PKGS


# Check for unnecessary packages
if [ -s "$dbs/packages.toremove" ]; then
	newline | dblog
	case x$rmpkg in
		x) _ 'Found unnecessary packages (use `cook pkgdb --rmpkg` to remove):' | dblog;;
		*) _ 'Removing unnecessary packages:' | dblog;;
	esac
	while read pkgsum pkgfile; do
		echo "  - $pkgfile" | dblog
		sed -i "/${pkgfile%.tazpkg}/d" $dbs/packages.list
		sed -i "/ $pkgfile/d" $dbs/packages.md5
		[ -n "$rmpkg" ] && rm $PKGS/$pkgfile	# remove packages only with --rmpkg
	done < $dbs/packages.toremove
	newline | dblog
fi
rm $dbs/packages.toremove


# files.list.lzma
_n 'Creating file "%s"' 'files.list.lzma' | dblog
touch $dbs/files.list
# pkgs.slitaz.org strongly depends on list sorted by packages names
#lzma e $dbs/files.list $dbs/files.list.lzma
/bin/lzma -zeqcT0 $dbs/files.list > $dbs/files.list.lzma
echo " ($(filesize $dbs/files.list.lzma))" | dblog

# Pre-sorting filenames causes 10% smaller resulting lzma file
_n 'Creating file "%s"' 'files-list.lzma' | dblog
cat $dbs/files.list | sort -k2 -o $dbs/files.list.sorted
#lzma e $dbs/files.list.sorted $dbs/files-list.lzma
/bin/lzma -zeqcT0 $dbs/files.list.sorted > $dbs/files-list.lzma
rm -f $dbs/files.list $dbs/files.list.sorted
echo " ($(filesize $dbs/files-list.lzma))" | dblog

md5sum $dbs/files-list.lzma | cut -d' ' -f1 | tr -d $'\n' > $dbs/files-list.md5

# Make bundle to fast recharge
_n 'Creating file "%s"' 'bundle.tar.lzma' | dblog
# Make sure to get "mirrors" file
until [ -e "$dbs/mirrors" ]; do
	wget -q -O $dbs/mirrors http://mirror1.slitaz.org/mirrors
	echo -n '.' | dblog; sleep 5
done
# Make sure to get "extra.list" file
until [ -e "$dbs/extra.list" ]; do
	wget -q -O $dbs/extra.list http://mirror1.slitaz.org/packages/get.list
	echo -n '.' | dblog; sleep 5
done
(
	cd $dbs
	busybox tar -chf bundle.tar \
		mirrors extra.list files-list.md5 packages.info descriptions.txt \
		packages.desc packages.md5 packages.txt packages.list packages.equiv
)
/bin/lzma -zeqcT0 $dbs/bundle.tar > $dbs/bundle.tar.lzma
rm $dbs/bundle.tar $dbs/mirrors
echo " ($(filesize $dbs/bundle.tar.lzma))" | dblog

# Display some info.
separator | dblog
nb=$(ls $PKGS/*.tazpkg 2>/dev/null | wc -l)
time=$(($(date +%s) - $time))
# L10n: 's' is for seconds (cooking time)
{ _ 'Packages: %s - Time: %ss' "$nb" "$time"; newline; } | dblog

# "Atomic" update now
cp -f $dbs/* $PKGS
rm -r $dbs


# Create all flavors files at once. Do we really need code to monitor
# flavors changes? Let's just build them with packages lists before
# syncing the mirror.
[ "$1" != '--flavors' ] && rm $command && exit 1

if [ ! -d "$flavors" ]; then
	{ _ 'Missing flavors folder "%s"' "$flavors"; newline; } | dblog
	rm $command
	exit 1
fi

[ ! -d "$live" ] && mkdir -p $live
_ 'Creating flavors files in "%s"' "$live" | dblog
_ 'Cook pkgdb: Creating all flavors' | log
separator | dblog

_ 'Recharging lists to use latest packages...' | dblog
tazpkg recharge >/dev/null 2>/dev/null

# We need a custom tazlito config to set working dir to /home/slitaz.
if [ ! -f "$live/tazlito.conf" ]; then
	_ 'Creating configuration file "%s"' 'tazlito.conf' | dblog
	cp /etc/tazlito/tazlito.conf $live
	sed -i s@WORK_DIR=.*@WORK_DIR=\"/home/slitaz\"@ \
		$live/tazlito.conf
fi

# Update Hg flavors repo and pack.
if [ -d "$flavors/.hg" ]; then
	cd $flavors; hg pull -u
fi

cd $live
_ 'Starting to generate flavors...' | dblog
rm -f flavors.list *.flavor
for i in $flavors/*; do
	fl=$(basename $i)
	_ 'Packing flavor "%s"' "$fl" | dblog
	tazlito pack-flavor $fl >/dev/null || exit 1
	tazlito show-flavor $fl --brief --noheader 2>/dev/null >> flavors.list
done
cp -f $live/*.flavor $live/flavors.list $PKGS
separator | dblog
{ _ 'Total flavors size: %s' "$(du -sh $live | awk '{print $1}')"; newline; } | dblog
separator | dblog
_ 'Cook pkgdb end: %s' "$(date "$(_ '+%%F %%R')")" | dblog

rm $command


exit 0
